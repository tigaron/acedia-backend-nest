# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Channel {
  createdAt: DateTime!
  id: String!
  messages: [Message]
  name: String!
  profile: Profile!
  profileId: String!
  server: Server!
  serverId: String!
  type: ChannelTypeEnum!
  updatedAt: DateTime!
}

"""Defines the type of a channel."""
enum ChannelTypeEnum {
  AUDIO
  TEXT
  VIDEO
}

type Conversation {
  createdAt: DateTime!
  directMessages: [DirectMessage]
  id: String!
  memberOne: Member!
  memberOneId: String!
  memberTwo: Member!
  memberTwoId: String!
  updatedAt: DateTime!
}

input CreateChannelDto {
  name: String!
  serverId: String!
  type: ChannelTypeEnum!
}

input CreateMessageDto {
  channelId: String!
  content: String!
  fileUrl: String
  memberId: String!
  serverId: String!
}

input CreateProfileDto {
  email: String!
  imageUrl: String!
  name: String!
  userId: String!
}

input CreateServerDto {
  imageUrl: String!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteChannelDto {
  channelId: String!
  serverId: String!
}

input DeleteMemberDto {
  memberId: String!
  serverId: String!
}

input DeleteMessageDto {
  channelId: String!
  memberId: String!
  messageId: String!
  serverId: String!
}

type DirectMessage {
  content: String!
  conversation: Conversation!
  conversationId: String!
  createdAt: DateTime!
  deleted: Boolean!
  fileUrl: String
  id: String!
  member: Member!
  memberId: String!
  updatedAt: DateTime!
}

type Member {
  conversationsInitiated: [Conversation]
  conversationsReceived: [Conversation]
  createdAt: DateTime!
  directMessages: [DirectMessage]
  id: String!
  messages: [Message]
  profile: Profile!
  profileId: String!
  role: MemberRoleEnum!
  server: Server!
  serverId: String!
  updatedAt: DateTime!
}

"""Defines the role of a member in a server."""
enum MemberRoleEnum {
  ADMIN
  GUEST
  MODERATOR
}

type Message {
  channel: Channel!
  channelId: String!
  content: String!
  createdAt: DateTime!
  deleted: Boolean!
  fileUrl: String
  id: String!
  member: Member!
  memberId: String!
  updatedAt: DateTime!
}

type MessagesResult {
  messages: [Message]
  nextCursor: String
}

type Mutation {
  createChannel(input: CreateChannelDto!): Server
  createInviteCode(id: String!): Server
  createMember(inviteCode: String!): Server
  createMessage(input: CreateMessageDto!): Message
  createProfile(input: CreateProfileDto!): Profile
  createServer(input: CreateServerDto!): Server
  deleteChannel(input: DeleteChannelDto!): Server
  deleteMember(input: DeleteMemberDto!): Server
  deleteMessage(input: DeleteMessageDto!): Message
  deleteServer(id: String!): Server
  leaveServer(id: String!): Server
  updateChannel(input: UpdateChannelDto!): Server
  updateMemberRole(input: UpdateMemberRoleDto!): Server
  updateMessage(input: UpdateMessageDto!): Message
  updateServer(input: UpdateServerDto!): Server
}

type Profile {
  channels: [Channel]
  createdAt: DateTime!
  email: String!
  id: String!
  imageUrl: String!
  members: [Member]
  name: String!
  servers: [Server]
  updatedAt: DateTime!
  userId: String!
}

type Query {
  fetchConversation(memberOneId: String!, memberTwoId: String!): Conversation
  getAllServersByProfileId(profileId: String!): [Server]
  getBatchMessages(channelId: String!, cursor: String): MessagesResult
  getChannelById(id: String!): Channel
  getMemberByServerId(profileId: String!, serverId: String!): Member
  getProfileByUserId(userId: String!): Profile
  getServerById(id: String!, profileId: String!): Server
  getServerByInviteCode(inviteCode: String!, profileId: String!): Server
  getServerByProfileId(profileId: String!): Server
  getServerWithChannelById(id: String!, profileId: String!): Server
  getServerWithChannelMemberProfileById(id: String!, profileId: String!): Server
}

type Server {
  channels: [Channel!]!
  createdAt: DateTime!
  id: String!
  imageUrl: String!
  inviteCode: String!
  members: [Member!]!
  name: String!
  profile: Profile!
  profileId: String!
  updatedAt: DateTime!
}

type Subscription {
  messageCreated(channelId: String!): Message
  messageDeleted(channelId: String!): Message
  messageUpdated(channelId: String!): Message
}

input UpdateChannelDto {
  channelId: String!
  name: String!
  serverId: String!
  type: ChannelTypeEnum!
}

input UpdateMemberRoleDto {
  memberId: String!
  role: MemberRoleEnum!
  serverId: String!
}

input UpdateMessageDto {
  channelId: String!
  content: String!
  memberId: String!
  messageId: String!
  serverId: String!
}

input UpdateServerDto {
  imageUrl: String!
  name: String!
  serverId: String!
}